import {
  AppKit,
  ProviderUtil,
  W3mAccountActivityWidget,
  W3mAccountAuthButton,
  W3mAccountButton,
  W3mAccountDefaultWidget,
  W3mAccountNftsWidget,
  W3mAccountSettingsView,
  W3mAccountTokensWidget,
  W3mAccountView,
  W3mAccountWalletFeaturesWidget,
  W3mActivityList,
  W3mAllWalletsList,
  W3mAllWalletsListItem,
  W3mAllWalletsSearch,
  W3mAllWalletsView,
  W3mAllWalletsWidget,
  W3mApproveTransactionView,
  W3mButton,
  W3mBuyInProgressView,
  W3mChooseAccountNameView,
  W3mConnectAnnouncedWidget,
  W3mConnectButton,
  W3mConnectCustomWidget,
  W3mConnectExternalWidget,
  W3mConnectFeaturedWidget,
  W3mConnectInjectedWidget,
  W3mConnectMultiChainWidget,
  W3mConnectRecentWidget,
  W3mConnectRecommendedWidget,
  W3mConnectSocialsView,
  W3mConnectView,
  W3mConnectWalletConnectWidget,
  W3mConnectWalletsView,
  W3mConnectingExternalView,
  W3mConnectingFarcasterView,
  W3mConnectingHeader,
  W3mConnectingMultiChainView,
  W3mConnectingSocialView,
  W3mConnectingWcBrowser,
  W3mConnectingWcDesktop,
  W3mConnectingWcMobile,
  W3mConnectingWcQrcode,
  W3mConnectingWcUnsupported,
  W3mConnectingWcView,
  W3mConnectingWcWeb,
  W3mConnectorList,
  W3mDownloadsView,
  W3mEmailLoginWidget,
  W3mEmailVerifyDeviceView,
  W3mEmailVerifyOtpView,
  W3mGetWalletView,
  W3mHeader,
  W3mHelpWidget,
  W3mInputAddress,
  W3mInputCurrency,
  W3mInputToken,
  W3mLegalFooter,
  W3mMobileDownloadLinks,
  W3mNetworkButton,
  W3mNetworkSwitchView,
  W3mNetworksView,
  W3mOnRampActivityItem,
  W3mOnRampActivityView,
  W3mOnRampProviderItem,
  W3mOnRampProvidersFooter,
  W3mOnRampProvidersView,
  W3mOnrampFiatSelectView,
  W3mOnrampTokensView,
  W3mOnrampWidget,
  W3mProfileView,
  W3mRegisterAccountNameSuccess,
  W3mRegisterAccountNameView,
  W3mRouter,
  W3mSelectAddressesView,
  W3mSendSelectTokenView,
  W3mSnackBar,
  W3mSocialLoginList,
  W3mSocialLoginWidget,
  W3mSwapInput,
  W3mSwapInputSkeleton,
  W3mSwapPreviewView,
  W3mSwapSelectTokenView,
  W3mSwapView,
  W3mSwitchActiveChainView,
  W3mSwitchAddressView,
  W3mTooltip,
  W3mTransactionsView,
  W3mUnsupportedChainView,
  W3mUpdateEmailPrimaryOtpView,
  W3mUpdateEmailSecondaryOtpView,
  W3mUpdateEmailWalletView,
  W3mUpgradeToSmartAccountView,
  W3mUpgradeWalletView,
  W3mWalletCompatibleNetworksView,
  W3mWalletLoginList,
  W3mWalletReceiveView,
  W3mWalletSendDetails,
  W3mWalletSendPreviewView,
  W3mWalletSendView,
  W3mWhatIsABuyView,
  W3mWhatIsANetworkView,
  W3mWhatIsAWalletView,
  WcConstantsUtil,
  WcHelpersUtil,
  WuiSwapDetails,
  WuiTooltipTrigger,
  package_default
} from "./chunk-OCMFCGS2.js";
import "./chunk-RTQNAG3L.js";
import {
  AccountController,
  ChainController,
  CoreHelperUtil,
  NetworkController,
  a,
  p,
  snapshot,
  subscribe,
  w
} from "./chunk-WTYVSLVT.js";
import {
  require_react
} from "./chunk-7SNDHR3H.js";
import {
  __commonJS,
  __toESM
} from "./chunk-256EKJAK.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState2 = React.useState, useEffect3 = React.useEffect, useLayoutEffect = React.useLayoutEffect, useDebugValue2 = React.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore3(subscribe2, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState2({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe2, value, getSnapshot]);
          useEffect3(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe2(handleStoreChange);
          }, [subscribe2]);
          useDebugValue2(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe2, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore3;
        var useSyncExternalStore$2 = React.useSyncExternalStore !== void 0 ? React.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/@reown/appkit/dist/esm/src/library/react/index.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/valtio/esm/react.mjs
var import_react = __toESM(require_react(), 1);
var import_shim = __toESM(require_shim(), 1);
var { use } = import_react.default;
var { useSyncExternalStore } = import_shim.default;
var useAffectedDebugValue = (state, affected) => {
  const pathList = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    pathList.current = w(state, affected, true);
  });
  (0, import_react.useDebugValue)(pathList.current);
};
var targetCache = /* @__PURE__ */ new WeakMap();
function useSnapshot(proxyObject, options) {
  const notifyInSync = options == null ? void 0 : options.sync;
  const lastSnapshot = (0, import_react.useRef)();
  const lastAffected = (0, import_react.useRef)();
  let inRender = true;
  const currSnapshot = useSyncExternalStore(
    (0, import_react.useCallback)(
      (callback) => {
        const unsub = subscribe(proxyObject, callback, notifyInSync);
        callback();
        return unsub;
      },
      [proxyObject, notifyInSync]
    ),
    () => {
      const nextSnapshot = snapshot(proxyObject, use);
      try {
        if (!inRender && lastSnapshot.current && lastAffected.current && !p(
          lastSnapshot.current,
          nextSnapshot,
          lastAffected.current,
          /* @__PURE__ */ new WeakMap()
        )) {
          return lastSnapshot.current;
        }
      } catch (e) {
      }
      return nextSnapshot;
    },
    () => snapshot(proxyObject, use)
  );
  inRender = false;
  const currAffected = /* @__PURE__ */ new WeakMap();
  (0, import_react.useEffect)(() => {
    lastSnapshot.current = currSnapshot;
    lastAffected.current = currAffected;
  });
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production") {
    useAffectedDebugValue(currSnapshot, currAffected);
  }
  const proxyCache = (0, import_react.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
  return a(
    currSnapshot,
    currAffected,
    proxyCache,
    targetCache
  );
}

// node_modules/@reown/appkit/dist/esm/src/library/react/index.js
var modal = void 0;
function getAppKit(appKit) {
  if (appKit) {
    modal = appKit;
  }
}
function useAppKitProvider(chainNamespace) {
  const { providers, providerIds } = useSnapshot(ProviderUtil.state);
  const walletProvider = providers[chainNamespace];
  const walletProviderType = providerIds[chainNamespace];
  return {
    walletProvider,
    walletProviderType
  };
}
function useAppKitTheme() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitTheme" hook');
  }
  function setThemeMode(themeMode2) {
    if (themeMode2) {
      modal == null ? void 0 : modal.setThemeMode(themeMode2);
    }
  }
  function setThemeVariables(themeVariables2) {
    if (themeVariables2) {
      modal == null ? void 0 : modal.setThemeVariables(themeVariables2);
    }
  }
  const [themeMode, setInternalThemeMode] = (0, import_react2.useState)(modal.getThemeMode());
  const [themeVariables, setInternalThemeVariables] = (0, import_react2.useState)(modal.getThemeVariables());
  (0, import_react2.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeTheme((state) => {
      setInternalThemeMode(state.themeMode);
      setInternalThemeVariables(state.themeVariables);
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return {
    themeMode,
    themeVariables,
    setThemeMode,
    setThemeVariables
  };
}
function useAppKit() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKit" hook');
  }
  async function open(options) {
    await (modal == null ? void 0 : modal.open(options));
  }
  async function close() {
    await (modal == null ? void 0 : modal.close());
  }
  return { open, close };
}
function useWalletInfo() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useWalletInfo" hook');
  }
  const walletInfo = (0, import_react2.useSyncExternalStore)(modal.subscribeWalletInfo, modal.getWalletInfo, modal.getWalletInfo);
  return { walletInfo };
}
function useAppKitState() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitState" hook');
  }
  const [state, setState] = (0, import_react2.useState)(modal.getState());
  (0, import_react2.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeState((newState) => {
      setState({ ...newState });
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return state;
}
function useAppKitEvents() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitEvents" hook');
  }
  const [event, setEvents] = (0, import_react2.useState)(modal.getEvent());
  (0, import_react2.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeEvents((newEvent) => {
      setEvents({ ...newEvent });
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return event;
}

// node_modules/@reown/appkit-core/dist/esm/exports/react.js
function useAppKitNetwork() {
  const { activeCaipNetwork } = useSnapshot(ChainController.state);
  return {
    caipNetwork: activeCaipNetwork,
    chainId: activeCaipNetwork == null ? void 0 : activeCaipNetwork.chainId
  };
}
function useAppKitAccount() {
  const { status } = useSnapshot(AccountController.state);
  const { activeCaipAddress } = useSnapshot(ChainController.state);
  return {
    address: CoreHelperUtil.getPlainAddress(activeCaipAddress),
    isConnected: Boolean(activeCaipAddress),
    status
  };
}

// node_modules/@reown/appkit/dist/esm/exports/react.js
var modal2 = void 0;
function createAppKit(options) {
  if (!modal2) {
    modal2 = new AppKit({
      ...options,
      sdkVersion: CoreHelperUtil.generateSdkVersion(options.adapters ?? [], "react", package_default.version)
    });
    getAppKit(modal2);
  }
  return modal2;
}
export {
  AccountController,
  AppKit,
  CoreHelperUtil,
  NetworkController,
  W3mAccountActivityWidget,
  W3mAccountAuthButton,
  W3mAccountButton,
  W3mAccountDefaultWidget,
  W3mAccountNftsWidget,
  W3mAccountSettingsView,
  W3mAccountTokensWidget,
  W3mAccountView,
  W3mAccountWalletFeaturesWidget,
  W3mActivityList,
  W3mAllWalletsList,
  W3mAllWalletsListItem,
  W3mAllWalletsSearch,
  W3mAllWalletsView,
  W3mAllWalletsWidget,
  W3mApproveTransactionView,
  W3mButton,
  W3mBuyInProgressView,
  W3mChooseAccountNameView,
  W3mConnectAnnouncedWidget,
  W3mConnectButton,
  W3mConnectCustomWidget,
  W3mConnectExternalWidget,
  W3mConnectFeaturedWidget,
  W3mConnectInjectedWidget,
  W3mConnectMultiChainWidget,
  W3mConnectRecentWidget,
  W3mConnectRecommendedWidget,
  W3mConnectSocialsView,
  W3mConnectView,
  W3mConnectWalletConnectWidget,
  W3mConnectWalletsView,
  W3mConnectingExternalView,
  W3mConnectingFarcasterView,
  W3mConnectingHeader,
  W3mConnectingMultiChainView,
  W3mConnectingSocialView,
  W3mConnectingWcBrowser,
  W3mConnectingWcDesktop,
  W3mConnectingWcMobile,
  W3mConnectingWcQrcode,
  W3mConnectingWcUnsupported,
  W3mConnectingWcView,
  W3mConnectingWcWeb,
  W3mConnectorList,
  W3mDownloadsView,
  W3mEmailLoginWidget,
  W3mEmailVerifyDeviceView,
  W3mEmailVerifyOtpView,
  W3mGetWalletView,
  W3mHeader,
  W3mHelpWidget,
  W3mInputAddress,
  W3mInputCurrency,
  W3mInputToken,
  W3mLegalFooter,
  W3mMobileDownloadLinks,
  W3mNetworkButton,
  W3mNetworkSwitchView,
  W3mNetworksView,
  W3mOnRampActivityItem,
  W3mOnRampActivityView,
  W3mOnRampProviderItem,
  W3mOnRampProvidersFooter,
  W3mOnRampProvidersView,
  W3mOnrampFiatSelectView,
  W3mOnrampTokensView,
  W3mOnrampWidget,
  W3mProfileView,
  W3mRegisterAccountNameSuccess,
  W3mRegisterAccountNameView,
  W3mRouter,
  W3mSelectAddressesView,
  W3mSendSelectTokenView,
  W3mSnackBar,
  W3mSocialLoginList,
  W3mSocialLoginWidget,
  W3mSwapInput,
  W3mSwapInputSkeleton,
  W3mSwapPreviewView,
  W3mSwapSelectTokenView,
  W3mSwapView,
  W3mSwitchActiveChainView,
  W3mSwitchAddressView,
  W3mTooltip,
  W3mTransactionsView,
  W3mUnsupportedChainView,
  W3mUpdateEmailPrimaryOtpView,
  W3mUpdateEmailSecondaryOtpView,
  W3mUpdateEmailWalletView,
  W3mUpgradeToSmartAccountView,
  W3mUpgradeWalletView,
  W3mWalletCompatibleNetworksView,
  W3mWalletLoginList,
  W3mWalletReceiveView,
  W3mWalletSendDetails,
  W3mWalletSendPreviewView,
  W3mWalletSendView,
  W3mWhatIsABuyView,
  W3mWhatIsANetworkView,
  W3mWhatIsAWalletView,
  WcConstantsUtil,
  WcHelpersUtil,
  WuiSwapDetails,
  WuiTooltipTrigger,
  createAppKit,
  getAppKit,
  modal2 as modal,
  useAppKit,
  useAppKitAccount,
  useAppKitEvents,
  useAppKitNetwork,
  useAppKitProvider,
  useAppKitState,
  useAppKitTheme,
  useWalletInfo
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@reown_appkit_react.js.map
